////////////////////////////////////////////////////////////////////////////////
//
// Copyright  Â© 2013 E-Learning Research Lab, 
// Amrita Vishwa Vidyapeetham. All rights reserved. 
// E-Learning Research Lab and the A-VIEW logo are trademarks or
// registered trademarks of E-Learning Research Lab. 
// All other names used are the trademarks of their respective owners.
//
////////////////////////////////////////////////////////////////////////////////

/**
 *
 * File			: LogFileTarget.as
 * Module		: Common
 * Developer(s)	: Ramesh Guntha
 * Reviewer(s)	: Veena Gopal K.V
 *
 * Implements methods to write to the target log files.
 * Initialized from LogUtil class.
 *
 */

package edu.amrita.aview.core.shared.log
{
	
	import mx.core.mx_internal;
	import mx.formatters.DateFormatter;
	import mx.logging.targets.LineFormattedTarget;
	
	use namespace mx_internal;
	//VGCR:-Class Description
	public class LogFileTarget extends LineFormattedTarget
	{
		
		/**
		 * Name of the log file, generated by method generateFileName
		 */
		private var fileName:String;
		
		/**
		 * Platform specific imports and variables
		 */
		applicationType::DesktopMobile
		{
			import flash.desktop.NativeApplication;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;
			
			/**
			 * File stream to write into the log file. Initialized at the beginning of application launch and closed on app exit
			 */
			private var filesWrite:FileStream;
		}
		
		/**
		 *
		 * @public
		 * constructor
		 * Constructs an instance of a LogFileTarget that will generate file name and log file.
		 *
		 */
		public function LogFileTarget()
		{
			applicationType::mobile{
				clearCacheFiles();
			}
			generateFileName();
			createLogFile(fileName);
		}
		
		/**
		 *
		 * @private
		 * This function creates log file.
		 * This function is called from LogFileTarget()
		 * @param fileName type of String
		 * @return void
		 *
		 */
		private function createLogFile(fileName:String):void
		{
			applicationType::DesktopMobile
			{
				filesWrite=new FileStream;
				filesWrite.open(new File(File.applicationStorageDirectory.nativePath + "/Logs/" + fileName + ".txt"), FileMode.APPEND);
			}
		}
		
		/**
		 *
		 * @private
		 * This function generates log file name.
		 * This function is called from LogFileTarget()
		 *
		 * @return void
		 *
		 */
		private function generateFileName():void
		{
			var fileDateformatter:DateFormatter=new DateFormatter();
			fileDateformatter.formatString="DD-MM-YYYY";
			var fileDate:Date=new Date();
			applicationType::DesktopMobile
			{
				var appId:String=NativeApplication.nativeApplication.applicationID;
				fileName=appId + "_" + fileDateformatter.format(fileDate).toString();
			}
		}
		
		/**
		 *
		 * @override
		 * overides mx_internal method in LineFormattedTarget to desired target file.
		 * @param  message type of String containing preprocessed log message which may
		 * include time, date, category, etc.
		 * @return void
		 *
		 */
		override mx_internal function internalLog(message:String):void
		{
			applicationType::DesktopMobile
			{
				filesWrite.writeUTFBytes("\n" + message);
			}
		}
		
		/**
		 *
		 * @public
		 * This function closes log file.
		 * This function is called from clear() in LogUtil
		 *
		 * @return void
		 *
		 */
		public function closeLogFile():void
		{
			applicationType::DesktopMobile
			{
				filesWrite.close();
			}
		}
		/**
		 *
		 * @public
		 * This function deletes the cache files.
		 *
		 * @return void
		 *
		 */
		public function clearCacheFiles():void
		{
			applicationType::mobile{
				var appDataStorageDir:File = File.applicationStorageDirectory.resolvePath("AVContent");
				if(appDataStorageDir.exists){
					appDataStorageDir.deleteDirectory(true);
				}   
			}
		}
	}
}
